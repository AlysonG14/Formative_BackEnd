# Generated by Django 5.1.6 on 2025-05-15 16:40

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Professor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ni', models.IntegerField(blank=True, null=True)),
                ('nome', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.CharField(blank=True, max_length=255, null=True)),
                ('telefone', models.CharField(blank=True, max_length=16, null=True, validators=[django.core.validators.RegexValidator(message='O número tem que ser o formato de: 19 12345-6789', regex='^\\+?1?\\d{9,15}$')])),
                ('data_nascimento', models.DateField(blank=True, null=True)),
                ('data_contratacao', models.DateField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Professore',
            },
        ),
        migrations.CreateModel(
            name='Disciplinar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(blank=True, max_length=255, null=True)),
                ('curso', models.CharField(blank=True, choices=[('MC', 'Mecatrônica'), ('ADM', 'Administração'), ('ADS', 'Análise e Desenvolvimento de Sistemas'), ('MA', 'Manufatura')], max_length=3, null=True)),
                ('carga_horaria', models.TimeField(blank=True, null=True)),
                ('descricao', models.CharField(blank=True, max_length=255, null=True)),
                ('professor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='disciplinas', to='Ambiente.professor')),
            ],
            options={
                'verbose_name': 'Disciplina',
            },
        ),
        migrations.CreateModel(
            name='Ambiente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_inicio', models.DateTimeField(blank=True, null=True)),
                ('data_termino', models.DateTimeField(blank=True, null=True)),
                ('periodo', models.CharField(blank=True, choices=[('Manhã', 'Manhã'), ('Tarde', 'Tarde'), ('Noite', 'Noite')], max_length=5, null=True)),
                ('sala', models.CharField(blank=True, max_length=255, null=True)),
                ('disciplina', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Ambiente.disciplinar')),
                ('professor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Ambiente.professor')),
            ],
            options={
                'verbose_name': 'Ambiente',
            },
        ),
        migrations.CreateModel(
            name='Gestor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('sistema', models.CharField(blank=True, choices=[('P', 'Professores'), ('D', 'Disciplinas'), ('A', 'Ambientes')], max_length=1, null=True)),
                ('nome', models.CharField(blank=True, max_length=255, null=True)),
                ('idade', models.PositiveIntegerField(blank=True, null=True)),
                ('foto', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
